generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Feedback {
  id         String   @id @default(cuid())
  feedback   String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  created_at DateTime @default(now())
}

model Notification {
  id            String      @id @default(cuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
  un_read       Boolean     @default(true)
  created_at    DateTime    @default(now())
}

model Appointment {
  id               String            @id @default(cuid())
  carBrand         String
  plateNumber      String
  carIssue         String
  vehicleModel     String
  mileage          String
  chassisNumber    String?
  engineNumber     String?
  event            Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          Int
  isExpired        Boolean           @default(false)
  isWalkedIn       Boolean           @default(false)
  walkedInFullName String?
  expiredAt        DateTime          @default(now()) // I set to default to cater the old data
  remark           String?
  customer         User?             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String?
  status           AppointmentStatus @default(PENDING) // Default is pending
  createdAt        DateTime          @default(now())
  updateAt         DateTime          @updatedAt
  Notification     Notification[]

  @@map("appointments")
}

model Event {
  id           Int           @id @default(autoincrement())
  title        String
  start        DateTime
  end          DateTime
  appointments Appointment[]
  allowed      Int
  createAt     DateTime      @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordToken {
  uuid    String   @unique
  token   String
  expires DateTime
}

model User {
  id            String           @id @default(cuid())
  firstName     String?
  lastName      String?
  username      String?          @unique
  phoneNumber   String?          @unique
  birthDate     DateTime?
  gender        String?
  email         String?          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role             @default(BASIC)
  appointments  Appointment[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime         @default(now())
  updateAt      DateTime         @updatedAt
  address       Address?
  isEmailVerify Boolean          @default(false)
  notifType     NotificationMode @default(NOTHING)
  feedbacks     Feedback[]

  @@map("users")
}

enum NotificationMode {
  SMS
  EMAIL
  NOTHING
}

model Address {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  street    String
  city      String
  province  String
  zip_code  String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  BASIC
  ADMIN
}

enum AppointmentStatus {
  PENDING
  ONGOING
  EXPIRED
  DONE
  APPROVED
  DISAPPROVED
  CANCELED
}
